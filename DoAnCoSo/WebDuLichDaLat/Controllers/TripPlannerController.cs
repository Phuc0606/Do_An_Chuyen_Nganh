using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using WebDuLichDaLat.Models;

namespace WebDuLichDaLat.Controllers
{
    public class TripPlannerController : Controller
    {
        private readonly ApplicationDbContext _context;

        public TripPlannerController(ApplicationDbContext context)
        {
            _context = context;
        }

        [HttpGet]
        public IActionResult Index()
        {
            var categories = _context.Categories.ToList();
            var touristPlaces = _context.TouristPlaces.ToList();

            var model = new TripPlannerViewModel
            {
                Categories = categories,
                TouristPlaces = touristPlaces,
                TransportOptions = _context.TransportOptions.ToList(),
                Hotels = _context.Hotels.ToList(),
                Restaurants = _context.Restaurants.ToList(),
                Attractions = _context.Attractions.ToList(),
                Suggestions = new List<string>()
            };

            model.TransportSelectList = model.TransportOptions
                .Select(t => new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem
                {
                    Value = t.Id.ToString(),
                    Text = $"{t.Name} ({t.Type})"
                })
                .ToList();

            ViewBag.TouristPlacesJson = JsonConvert.SerializeObject(
                touristPlaces.Select(tp => new { tp.Id, tp.Name, tp.Latitude, tp.Longitude, tp.CategoryId })
            );

            return View(model);
        }

        [HttpPost]
        public IActionResult Index(TripPlannerViewModel model)
        {
            model.TransportOptions = _context.TransportOptions.ToList();
            model.TransportSelectList = model.TransportOptions
                .Select(t => new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem
                {
                    Value = t.Id.ToString(),
                    Text = $"{t.Name} ({t.Type})"
                })
                .ToList();
            model.Hotels = _context.Hotels.ToList();
            model.Restaurants = _context.Restaurants.ToList();
            model.Attractions = _context.Attractions.ToList();
            model.TouristPlaces = _context.TouristPlaces.ToList();

            var selectedPlaceIds = model.SelectedTouristPlaceIds?
                .Where(id => !string.IsNullOrEmpty(id))
                .ToList() ?? new List<string>();

            model.Suggestions = CalculateSuggestions(model, selectedPlaceIds);
            return View(model);
        }

        private List<string> CalculateSuggestions(TripPlannerViewModel model, List<string> selectedPlaceIds, bool onlyTopCheapest = false)
        {
            var suggestions = new List<string>();
            var warnings = new List<string>();
            decimal originalBudget = model.Budget;

            if (originalBudget <= 0)
                return new List<string> { "‚ö†Ô∏è Vui l√≤ng nh·∫≠p ng√¢n s√°ch h·ª£p l·ªá." };

            if (string.IsNullOrEmpty(model.StartLocation))
                return new List<string> { "‚ö†Ô∏è Vui l√≤ng nh·∫≠p v·ªã tr√≠ b·∫Øt ƒë·∫ßu." };

            int recommendedDays = CalculateRecommendedDays(selectedPlaceIds.Count);
            int actualDays = model.NumberOfDays > 0 ? model.NumberOfDays : recommendedDays;

            // C·∫£nh b√°o khi s·ªë ng√†y qu√° nhi·ªÅu so v·ªõi ƒë·ªãa ƒëi·ªÉm
            if (actualDays > selectedPlaceIds.Count * 2)
            {
                warnings.Add($"‚ö†Ô∏è G·ª£i √Ω: {selectedPlaceIds.Count} ƒë·ªãa ƒëi·ªÉm v·ªõi {actualDays} ng√†y c√≥ th·ªÉ d∆∞ th·ª´a. " +
                            $"B·∫°n s·∫Ω c√≥ nhi·ªÅu th·ªùi gian ngh·ªâ ng∆°i v√† kh√°m ph√° s√¢u h∆°n m·ªói ƒë·ªãa ƒëi·ªÉm.");
            }
            else if (actualDays > recommendedDays + 2)
            {
                warnings.Add($"‚ö†Ô∏è G·ª£i √Ω: {selectedPlaceIds.Count} ƒë·ªãa ƒëi·ªÉm n√™n ƒëi {recommendedDays}-{recommendedDays + 1} ng√†y thay v√¨ {actualDays} ng√†y ƒë·ªÉ t·ªëi ∆∞u chi ph√≠.");
            }

            double distanceKm = model.DistanceKm > 0 ? model.DistanceKm : 1;
            bool isFromOtherCity = !(model.StartLocation?.Contains("ƒê√† L·∫°t") ?? false);

            if (!ValidateSelectedPlaces(selectedPlaceIds))
            {
                warnings.Add("‚Ä¢ B·∫°n ch∆∞a ch·ªçn ƒë·ªãa ƒëi·ªÉm c·ª• th·ªÉ ‚Äî h·ªá th·ªëng s·∫Ω l·∫≠p k·∫ø ho·∫°ch t·ªïng qu√°t cho ƒê√† L·∫°t d·ª±a tr√™n ng√¢n s√°ch v√† s·ªë ng√†y.");
            }

            // T√¨m location legacy
            var legacyLocation = _context.LegacyLocations
                .AsEnumerable()
                .FirstOrDefault(l => !string.IsNullOrEmpty(l.OldName) &&
                                     !string.IsNullOrEmpty(model.StartLocation) &&
                                     model.StartLocation.ToLower().Contains(l.OldName.ToLower()));

            // L·∫•y danh s√°ch ph∆∞∆°ng ti·ªán ph√π h·ª£p
            var mainTransports = model.TransportOptions
                .Where(t => isFromOtherCity ? !t.Name.Contains("Taxi n·ªôi th√†nh")
                                            : t.Name.Contains("Taxi n·ªôi th√†nh") || t.IsSelfDrive)
                .ToList();

            // √Åp d·ª•ng b·ªô l·ªçc ph∆∞∆°ng ti·ªán n·∫øu ng∆∞·ªùi d√πng ƒë√£ ch·ªçn
            if (model.SelectedTransportId.HasValue)
            {
                mainTransports = mainTransports
                    .Where(t => t.Id == model.SelectedTransportId.Value)
                    .ToList();
            }

            if (!mainTransports.Any())
                return new List<string> { "Kh√¥ng c√≥ ph∆∞∆°ng ti·ªán ph√π h·ª£p v·ªõi v·ªã tr√≠ xu·∫•t ph√°t." };

            // L·∫∑p qua t·ª´ng ph∆∞∆°ng ti·ªán ƒë·ªÉ t√≠nh to√°n
            foreach (var transport in mainTransports)
            {
                try
                {
                    // 1. T√≠nh chi ph√≠ v·∫≠n chuy·ªÉn ch√≠nh
                    decimal transportCost = CalculateTransportCost(transport, legacyLocation, distanceKm,
                        selectedPlaceIds, actualDays, isFromOtherCity);

                    // 2. L·∫•y danh s√°ch ƒë·ªãa ƒëi·ªÉm ƒë√£ ch·ªçn
                    var selectedPlaces = _context.TouristPlaces
                        .Where(p => selectedPlaceIds.Contains(p.Id))
                        .ToList();

                    // 3. T·∫°o l·ªãch tr√¨nh t·ªëi ∆∞u
                    double startLat = 11.940419;  // T·∫°m t·ªça ƒë·ªô trung t√¢m ƒê√† L·∫°t
                    double startLng = 108.458313;
                    var route = OptimizeRoute(startLat, startLng, selectedPlaces);

                    // 4. T√≠nh to√°n ng√¢n s√°ch c√≤n l·∫°i sau chi ph√≠ v·∫≠n chuy·ªÉn
                    decimal remainingBudget = originalBudget - transportCost;
                    if (remainingBudget <= 0) continue;

                    // 5. S·ª≠ d·ª•ng logic m·ªõi ƒë·ªÉ t√≠nh chi ph√≠ kh√°ch s·∫°n
                    var hotelCalculation = CalculateOptimizedHotelCosts(selectedPlaceIds, remainingBudget * 0.35m, actualDays);
                    decimal hotelCost = hotelCalculation.TotalCost;
                    string hotelDetails = hotelCalculation.Details;
                    var selectedHotels = hotelCalculation.SelectedHotels;

                    // 6. C·∫≠p nh·∫≠t ng√¢n s√°ch c√≤n l·∫°i
                    remainingBudget -= hotelCost;
                    if (remainingBudget <= 0) continue;

                    // 7. S·ª≠ d·ª•ng logic m·ªõi ƒë·ªÉ t√≠nh chi ph√≠ ƒÉn u·ªëng
                    var foodCalculation = CalculateOptimizedFoodCosts(selectedPlaceIds, remainingBudget * 0.6m, actualDays);
                    decimal foodCost = foodCalculation.TotalCost;
                    string foodDetails = foodCalculation.Details;

                    // 8. T√≠nh chi ph√≠ v√© tham quan
                    var ticketCalculation = CalculateTicketCosts(selectedPlaceIds, model);
                    decimal ticketCost = ticketCalculation.TotalCost;
                    var ticketDetails = ticketCalculation.TicketDetails;
                    var ticketWarnings = ticketCalculation.Warnings;

                    // 9. T√≠nh chi ph√≠ di chuy·ªÉn n·ªôi th√†nh (s·ª≠ d·ª•ng kh√°ch s·∫°n ƒë·∫ßu ti√™n l√†m base)
                    var primaryHotel = selectedHotels.FirstOrDefault() ?? _context.Hotels.First();
                    var localTransportCalculation = CalculateLocalTransportCosts(
                        selectedPlaceIds, actualDays, primaryHotel, transport);

                    decimal localTransportCost = localTransportCalculation.TotalCost;
                    var localTransportDetails = localTransportCalculation.Details;

                    // 10. T√≠nh chi ph√≠ ph√°t sinh
                    decimal miscCost = Math.Round((transportCost + hotelCost + foodCost + ticketCost + localTransportCost) * 0.1m, 0);
                    decimal totalCost = transportCost + hotelCost + foodCost + ticketCost + localTransportCost + miscCost;

                    // 11. Ki·ªÉm tra ng√¢n s√°ch
                    if (totalCost > originalBudget) continue;

                    decimal remaining = originalBudget - totalCost;

                    // 12. T·∫°o chi ti·∫øt l·ªãch tr√¨nh
                    string routeDetails = string.Join("<br/>", route.Select((p, idx) => $"{idx + 1}. {p.Name}"));

                    // 13. T·∫°o cluster details n·∫øu c√≥ nhi·ªÅu kh√°ch s·∫°n
                    string clusterDetails = "";
                    if (selectedHotels.Count > 1)
                    {
                        var places = _context.TouristPlaces.Where(p => selectedPlaceIds.Contains(p.Id)).ToList();
                        var clusters = ClusterPlacesByDistance(places, actualDays);

                        clusterDetails = "<br/><b>üìç Ph√¢n b·ªï th·ªùi gian:</b><br/>";
                        for (int i = 0; i < clusters.Count; i++)
                        {
                            var cluster = clusters[i];
                            clusterDetails += $"Giai ƒëo·∫°n {i + 1}: {cluster.RecommendedNights + 1} ng√†y t·∫°i " +
                                            $"{string.Join(", ", cluster.Places.Take(2).Select(p => p.Name))}" +
                                            $"{(cluster.Places.Count > 2 ? "..." : "")}<br/>";
                        }
                    }

                    // 13.1 N·∫øu kh√¥ng ch·ªçn ƒë·ªãa ƒëi·ªÉm: th√™m ƒë√≠ch ƒë·∫øn ƒê√† L·∫°t v√† g·ª£i √Ω ƒë·ªãa ƒëi·ªÉm ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn
                    if (selectedPlaceIds == null || !selectedPlaceIds.Any())
                    {
                        var suggested = SuggestDefaultPlaces(6);
                        if (suggested.Any())
                        {
                            var suggestionsList = string.Join("<br/>", suggested.Select(p => $"‚Ä¢ {p.Name}"));
                            clusterDetails = $"<br/><b>üìç ƒê√≠ch ƒë·∫øn: ƒê√† L·∫°t</b><br/><b>üìå G·ª£i √Ω ƒë·ªãa ƒëi·ªÉm ƒë·ªÉ ch·ªçn:</b><br/>{suggestionsList}";
                        }
                        else
                        {
                            clusterDetails = $"<br/><b>üìç ƒê√≠ch ƒë·∫øn: ƒê√† L·∫°t</b>";
                        }
                    }

                    // 13.2 N·∫øu kh√¥ng ch·ªçn ƒë·ªãa ƒëi·ªÉm: ch·ªâ hi·ªÉn th·ªã chi ph√≠ ƒë·∫øn ƒê√† L·∫°t v√† g·ª£i √Ω ƒë·ªãa ƒëi·ªÉm
                    bool basicOnly = selectedPlaceIds == null || !selectedPlaceIds.Any();
                    if (basicOnly)
                    {
                        // ·∫®n to√†n b·ªô c√°c chi ph√≠ kh√°c, ch·ªâ gi·ªØ chi ph√≠ ƒë·∫øn ƒê√† L·∫°t
                        hotelCost = 0; foodCost = 0; ticketCost = 0; localTransportCost = 0; miscCost = 0;
                        totalCost = transportCost;
                        remaining = originalBudget - totalCost;
                        routeDetails = string.Empty;
                        ticketDetails = new List<string>();
                        localTransportDetails = new List<string>();
                        ticketWarnings = new List<string>();
                        warnings.Clear();
                    }

                    // 14. Format suggestion
                    string suggestion = FormatOptimizedSuggestion(
                        transport, transportCost,
                        hotelDetails, hotelCost,
                        foodDetails, foodCost,
                        ticketCost, localTransportCost, miscCost,
                        totalCost, remaining, actualDays,
                        ticketDetails, localTransportDetails, ticketWarnings,
                        routeDetails, clusterDetails, basicOnly);

                    suggestions.Add(suggestion);
                }
                catch (Exception ex)
                {
                    suggestions.Add($"‚ö†Ô∏è L·ªói t√≠nh to√°n cho ph∆∞∆°ng ti·ªán {transport.Name}: {ex.Message}");
                }
            }

            // 15. X·ª≠ l√Ω k·∫øt qu·∫£
            if (!suggestions.Any())
                return GenerateBudgetWarning(originalBudget, actualDays, selectedPlaceIds.Count);

            // 16. Lo·∫°i b·ªè duplicate v√† s·∫Øp x·∫øp
            suggestions = RemoveDuplicateSuggestions(suggestions)
                         .OrderBy(s => ExtractTotalCost(s))
                         .Take(5).ToList();

            // 17. Th√™m warnings n·∫øu c√≥
            if (warnings.Any())
            {
                var finalResults = new List<string>();
                finalResults.AddRange(warnings);
                finalResults.AddRange(suggestions);
                return finalResults;
            }

            return suggestions;
        }


        // NEW: Calculate local transport costs within Da Lat with advanced logic

        private (decimal TotalCost, List<string> Details) CalculateLocalTransportCosts(
    List<string> selectedPlaceIds,
    int days,
    Hotel selectedHotel,
    TransportOption selectedTransport = null)
        {
            var details = new List<string>();
            decimal totalCost = 0;

            // Validate inputs
            if (selectedPlaceIds == null || !selectedPlaceIds.Any())
            {
                details.Add("‚Ä¢ Kh√¥ng c√≥ ƒë·ªãa ƒëi·ªÉm ƒë·ªÉ di chuy·ªÉn");
                return (50000 * days, details);
            }

            if (days <= 0)
            {
                details.Add("‚Ä¢ S·ªë ng√†y kh√¥ng h·ª£p l·ªá");
                return (0, details);
            }

            // Get tourist places
            var places = _context.TouristPlaces
                .Where(p => selectedPlaceIds.Contains(p.Id))
                .ToList();

            if (!places.Any())
            {
                decimal defaultCost = 50000 * days;
                details.Add($"‚Ä¢ Di chuy·ªÉn n·ªôi th√†nh (∆∞·ªõc t√≠nh): {FormatCurrency(defaultCost)}");
                return (defaultCost, details);
            }

            // Hotel coordinates
            double startLat = selectedHotel?.Latitude ?? 11.940419;
            double startLng = selectedHotel?.Longitude ?? 108.458313;

            try
            {
                // S·ª¨A: G·ªçi h√†m v·ªõi tham s·ªë days ch√≠nh x√°c
                if (selectedTransport != null && selectedTransport.IsSelfDrive)
                {
                    return CalculatePersonalVehicleTransportWithFullSchedule(places, days, startLat, startLng, selectedTransport, details);
                }

                return CalculateTaxiTransportWithFullSchedule(places, days, startLat, startLng, details);
            }
            catch (Exception ex)
            {
                details.Add($"‚Ä¢ L·ªói t√≠nh to√°n di chuy·ªÉn: {ex.Message}");
                decimal fallbackCost = days * 100000;
                return (fallbackCost, details);
            }
        }

        // Helper methods cho CalculateLocalTransportCosts (gi·ªØ nguy√™n nh∆∞ ƒë√£ vi·∫øt tr∆∞·ªõc ƒë√≥)
        private (decimal TotalCost, List<string> Details) CalculatePersonalVehicleTransport(
            List<TouristPlace> places,
            int days,
            double startLat,
            double startLng,
            TransportOption transport,
            List<string> details)
        {
            decimal totalCost = 0;
            double totalDistance = 0;
            var allDayRoutes = new List<string>();

            // Distribute places across days
            var dailyPlaces = DistributePlacesAcrossDays(places, days);

            for (int day = 1; day <= days; day++)
            {
                var dayPlaces = dailyPlaces.ElementAtOrDefault(day - 1) ?? new List<TouristPlace>();

                if (!dayPlaces.Any())
                {
                    allDayRoutes.Add($"Ng√†y {day}: Ngh·ªâ ng∆°i/kh√°m ph√° khu v·ª±c (~5 km)");
                    totalDistance += 5;
                    continue;
                }

                var (dayDistance, routeDescription) = CalculateDayRoute(dayPlaces, startLat, startLng, day);
                totalDistance += dayDistance;
                allDayRoutes.Add(routeDescription);
            }

            // Calculate fuel cost
            if (transport.FuelConsumption > 0 && transport.FuelPrice > 0)
            {
                decimal fuelUsed = ((decimal)totalDistance * transport.FuelConsumption) / 100m;
                totalCost = fuelUsed * transport.FuelPrice;

                details.Add($"‚Ä¢ {transport.Name} (ph∆∞∆°ng ti·ªán c√° nh√¢n)");
                details.AddRange(allDayRoutes);
                details.Add($"‚Ü≥ T·ªïng qu√£ng ƒë∆∞·ªùng: ~{totalDistance:F1} km");
                details.Add($"‚Ü≥ Nhi√™n li·ªáu: {fuelUsed:F2} l√≠t √ó {transport.FuelPrice:N0}ƒë = {FormatCurrency(totalCost)}");
            }
            else
            {
                totalCost = (decimal)totalDistance * 3000;
                details.Add($"‚Ä¢ {transport.Name} (∆∞·ªõc t√≠nh)");
                details.AddRange(allDayRoutes);
                details.Add($"‚Ü≥ Chi ph√≠ ∆∞·ªõc t√≠nh: {FormatCurrency(totalCost)}");
            }

            return (totalCost, details);
        }

        private (decimal TotalCost, List<string> Details) CalculateTaxiTransport(
            List<TouristPlace> places,
            int days,
            double startLat,
            double startLng,
            List<string> details)
        {
            decimal totalCost = 0;
            double totalDistance = 0;
            var allDayRoutes = new List<string>();
            decimal taxiRatePerKm = 15000;

            var dailyPlaces = DistributePlacesAcrossDays(places, days);

            for (int day = 1; day <= days; day++)
            {
                var dayPlaces = dailyPlaces.ElementAtOrDefault(day - 1) ?? new List<TouristPlace>();

                if (!dayPlaces.Any())
                {
                    allDayRoutes.Add($"Ng√†y {day}: Ngh·ªâ ng∆°i (~0 km)");
                    continue;
                }

                var (dayDistance, routeDescription) = CalculateDayRoute(dayPlaces, startLat, startLng, day);
                totalDistance += dayDistance;
                allDayRoutes.Add(routeDescription);
            }

            totalCost = (decimal)totalDistance * taxiRatePerKm;

            details.Add("‚Ä¢ Taxi n·ªôi th√†nh");
            details.AddRange(allDayRoutes);
            details.Add($"‚Ü≥ T·ªïng qu√£ng ƒë∆∞·ªùng: {totalDistance:F1} km √ó {taxiRatePerKm:N0}ƒë/km = {FormatCurrency(totalCost)}");

            return (totalCost, details);
        }

        private (double Distance, string RouteDescription) CalculateDayRoute(
            List<TouristPlace> dayPlaces,
            double startLat,
            double startLng,
            int dayNumber)
        {
            if (!dayPlaces.Any())
                return (0, $"Ng√†y {dayNumber}: Ngh·ªâ ng∆°i");

            double totalDayDistance = 0;
            var routeParts = new List<string> { "Kh√°ch s·∫°n" };

            double currentLat = startLat;
            double currentLng = startLng;

            foreach (var place in dayPlaces)
            {
                try
                {
                    double distanceToPlace = GetDistance(currentLat, currentLng, place.Latitude, place.Longitude);
                    totalDayDistance += distanceToPlace;
                    routeParts.Add($"{place.Name} (~{distanceToPlace:F1} km)");

                    currentLat = place.Latitude;
                    currentLng = place.Longitude;
                }
                catch (Exception)
                {
                    routeParts.Add($"{place.Name} (l·ªói t·ªça ƒë·ªô)");
                    totalDayDistance += 5;
                }
            }

            // Return to hotel
            try
            {
                double returnDistance = GetDistance(currentLat, currentLng, startLat, startLng);
                totalDayDistance += returnDistance;
                routeParts.Add($"Kh√°ch s·∫°n (~{returnDistance:F1} km)");
            }
            catch (Exception)
            {
                totalDayDistance += 5;
                routeParts.Add("Kh√°ch s·∫°n (~5 km)");
            }

            string routeDescription = $"Ng√†y {dayNumber}: {string.Join(" ‚Üí ", routeParts)} | T·ªïng: ~{totalDayDistance:F1} km";
            return (totalDayDistance, routeDescription);
        }






        // ============= T√çNH QU√ÉNG ƒê∆Ø·ªúNG CHIA NG√ÄY + KH·ª® H·ªíI ============= 




        private (decimal TotalCost, List<string> Details) CalculatePersonalVehicleCost(
    List<string> selectedPlaceIds,
    int days,
    TransportOption selectedTransport)
        {
            var details = new List<string>();

            // ∆Ø·ªõc l∆∞·ª£ng kho·∫£ng c√°ch ƒëi trong ng√†y
            decimal totalDistance = 0;
            foreach (var placeId in selectedPlaceIds)
                totalDistance += GetEstimatedDistance(placeId);

            // N·∫øu nhi·ªÅu ƒëi·ªÉm/ng√†y th√¨ th√™m qu√£ng ƒë∆∞·ªùng gi·ªØa c√°c ƒëi·ªÉm
            if (selectedPlaceIds.Count > 1)
                totalDistance += (selectedPlaceIds.Count - 1) * 4;

            // Quay v·ªÅ kh√°ch s·∫°n
            totalDistance += GetEstimatedDistance(selectedPlaceIds.Last());

            // Nh√¢n s·ªë ng√†y
            totalDistance *= days;

            // Chi ph√≠ nhi√™n li·ªáu
            decimal fuelUsed = (selectedTransport.FuelConsumption / 100m) * totalDistance;
            decimal fuelCost = fuelUsed * selectedTransport.FuelPrice;

            // Hao m√≤n + b·∫£o d∆∞·ª°ng (20%)
            decimal maintenance = fuelCost * 0.2m;

            decimal totalCost = fuelCost + maintenance;
            details.Add($"‚Ä¢ {selectedTransport.Name}: {FormatCurrency(totalCost)} (~{totalDistance:F0}km, {fuelUsed:F2} l√≠t)");

            return (totalCost, details);
        }
        private (decimal Cost, List<string> Details) CalculateElectricShuttleStrategy(List<string> selectedPlaceIds, List<LocalTransport> localTransports, bool hasMultiplePlacesPerDay)
        {
            var details = new List<string>();
            decimal totalCost = 0;
            var electricPlaces = new List<string>();
            var nonElectricPlaces = new List<string>();

            // Separate places with electric shuttle vs without
            foreach (var placeId in selectedPlaceIds)
            {
                var electricShuttle = localTransports.FirstOrDefault(lt =>
                    lt.TransportType == TransportType.ElectricShuttle &&
                    (lt.TouristPlaceId == placeId || lt.TouristPlaceId == null));

                if (electricShuttle != null)
                {
                    electricPlaces.Add(placeId);
                    decimal cost = (electricShuttle.PricePerTrip ?? 50000) * 2; // Round trip
                    totalCost += cost;

                    var place = _context.TouristPlaces.FirstOrDefault(p => p.Id == placeId);
                    details.Add($"‚Ä¢ {place?.Name}: Xe ƒëi·ªán {FormatCurrency(cost)} (kh·ª© h·ªìi)");
                }
                else
                {
                    nonElectricPlaces.Add(placeId);
                }
            }

            // Add taxi cost for non-electric places
            if (nonElectricPlaces.Any())
            {
                var taxiTransport = localTransports.FirstOrDefault(lt => lt.TransportType == TransportType.LocalTaxi);
                decimal taxiCostPerKm = taxiTransport?.PricePerKm ?? 15000;

                foreach (var placeId in nonElectricPlaces)
                {
                    decimal estimatedKm = GetEstimatedDistance(placeId);
                    decimal tripCost = taxiCostPerKm * estimatedKm * 2; // Round trip

                    // If multiple places in a day, add inter-destination cost
                    if (hasMultiplePlacesPerDay)
                        tripCost += taxiCostPerKm * 3; // Average 3km between destinations

                    totalCost += tripCost;

                    var place = _context.TouristPlaces.FirstOrDefault(p => p.Id == placeId);
                    details.Add($"‚Ä¢ {place?.Name}: Taxi {FormatCurrency(tripCost)} ({estimatedKm * 2}km)");
                }
            }

            return (totalCost, details);
        }
        private (decimal Cost, List<string> Details) CalculateTaxiStrategy(List<string> selectedPlaceIds, List<LocalTransport> localTransports, Hotel selectedHotel, bool hasMultiplePlacesPerDay)
        {
            var details = new List<string>();
            var taxiTransport = localTransports.FirstOrDefault(lt => lt.TransportType == TransportType.LocalTaxi);
            decimal taxiCostPerKm = taxiTransport?.PricePerKm ?? 15000;
            decimal totalCost = 0;

            if (hasMultiplePlacesPerDay)
            {
                // Calculate optimized route cost
                decimal totalDistance = 0;

                foreach (var placeId in selectedPlaceIds)
                {
                    totalDistance += GetEstimatedDistance(placeId);
                }

                // Add inter-destination distances
                if (selectedPlaceIds.Count > 1)
                {
                    totalDistance += (selectedPlaceIds.Count - 1) * 4; // Average 4km between places
                }

                // Add return to hotel
                totalDistance += GetEstimatedDistance(selectedPlaceIds.Last());

                totalCost = totalDistance * taxiCostPerKm;
                details.Add($"‚Ä¢ Taxi cho t·∫•t c·∫£ ƒëi·ªÉm: {FormatCurrency(totalCost)} (~{totalDistance:F0}km)");
                details.Add($"  ‚Ü≥ Bao g·ªìm: di chuy·ªÉn gi·ªØa c√°c ƒëi·ªÉm + v·ªÅ kh√°ch s·∫°n");
            }
            else
            {
                // Simple round trip for each place
                foreach (var placeId in selectedPlaceIds)
                {
                    decimal estimatedKm = GetEstimatedDistance(placeId);
                    decimal tripCost = taxiCostPerKm * estimatedKm * 2; // Round trip
                    totalCost += tripCost;

                    var place = _context.TouristPlaces.FirstOrDefault(p => p.Id == placeId);
                    details.Add($"‚Ä¢ {place?.Name}: {FormatCurrency(tripCost)} ({estimatedKm * 2}km kh·ª© h·ªìi)");
                }
            }

            return (totalCost, details);
        }

        private (decimal Cost, List<string> Details) CalculateHotelShuttleStrategy(List<string> selectedPlaceIds, List<LocalTransport> localTransports, Hotel selectedHotel, bool hasMultiplePlacesPerDay)
        {
            var details = new List<string>();
            decimal totalCost = 0;
            var shuttlePlaces = new List<string>();
            var nonShuttlePlaces = new List<string>();

            // Check which places have hotel shuttle service
            foreach (var placeId in selectedPlaceIds)
            {
                var hotelShuttle = localTransports.FirstOrDefault(lt =>
                    lt.TransportType == TransportType.HotelShuttle &&
                    (lt.HotelId == selectedHotel.Id || lt.HotelId == null) &&
                    (lt.TouristPlaceId == placeId || lt.TouristPlaceId == null));

                if (hotelShuttle != null)
                {
                    shuttlePlaces.Add(placeId);
                    decimal cost = (hotelShuttle.PricePerTrip ?? 0) * 2; // Round trip
                    totalCost += cost;

                    var place = _context.TouristPlaces.FirstOrDefault(p => p.Id == placeId);
                    details.Add($"‚Ä¢ {place?.Name}: Xe bu√Ωt KS {FormatCurrency(cost)} (kh·ª© h·ªìi)");
                }
                else
                {
                    nonShuttlePlaces.Add(placeId);
                }
            }

            // Add taxi for places without shuttle
            if (nonShuttlePlaces.Any())
            {
                var taxiStrategy = CalculateTaxiStrategy(nonShuttlePlaces, localTransports, selectedHotel, hasMultiplePlacesPerDay && nonShuttlePlaces.Count > 1);
                totalCost += taxiStrategy.Cost;
                details.AddRange(taxiStrategy.Details);
            }

            return shuttlePlaces.Any() ? (totalCost, details) : (0, new List<string>());
        }

        private (decimal Cost, List<string> Details) CalculateMotorbikeStrategy(List<LocalTransport> localTransports, int days)
        {
            var details = new List<string>();
            var motorbike = localTransports.Where(lt => lt.TransportType == TransportType.MotorbikeRental)
                                         .OrderBy(lt => lt.PricePerDay ?? decimal.MaxValue)
                                         .FirstOrDefault();

            if (motorbike == null)
                return (0, details);

            decimal dailyCost = motorbike.PricePerDay ?? 150000;
            decimal totalCost = dailyCost * days;

            details.Add($"‚Ä¢ {motorbike.Name}: {FormatCurrency(totalCost)} ({days} ng√†y √ó {FormatCurrency(dailyCost)})");
            details.Add($"  ‚Ü≥ T·ª± do di chuy·ªÉn, ph√π h·ª£p nhi·ªÅu ƒëi·ªÉm/ng√†y");

            return (totalCost, details);
        }

        // Helper method to estimate distance from hotel to tourist place
        private decimal GetEstimatedDistance(string placeId)
        {
            // This could be enhanced with actual GPS coordinates calculation
            // For now, use estimated distances based on place type or location
            var place = _context.TouristPlaces.FirstOrDefault(p => p.Id == placeId);

            // Default distances (can be customized based on actual locations)
            return place?.Name?.ToLower() switch
            {
                var name when name.Contains("h·ªì xu√¢n h∆∞∆°ng") => 2,
                var name when name.Contains("langbiang") => 12,
                var name when name.Contains("valley") => 8,
                var name when name.Contains("dalat flower") => 6,
                var name when name.Contains("crazy house") => 3,
                var name when name.Contains("bao dai") => 4,
                var name when name.Contains("linh phuoc") => 15,
                var name when name.Contains("elephant") => 8,
                _ => 5 // Default 5km
            };
        }

        // Updated method signature to include local transport
        private (decimal TotalCost, string Details, List<Hotel> SelectedHotels) CalculateOptimizedHotelCosts(
    List<string> selectedPlaceIds,
    decimal hotelBudget,
    int days)
{
    int nights = days > 1 ? days - 1 : 0;
    if (nights == 0) 
        return (0, "Chuy·∫øn ƒëi trong ng√†y - kh√¥ng c·∫ßn ngh·ªâ ƒë√™m", new List<Hotel>());

    if (hotelBudget <= 0)
        return (0, "Kh√¥ng c√≥ ng√¢n s√°ch cho kh√°ch s·∫°n", new List<Hotel>());

    var places = _context.TouristPlaces
        .Where(p => selectedPlaceIds.Contains(p.Id))
        .ToList();

    // Fallback: kh√¥ng ch·ªçn ƒë·ªãa ƒëi·ªÉm -> ƒë·ªÅ xu·∫•t kh√°ch s·∫°n theo ng√¢n s√°ch to√†n th√†nh ph·ªë
    if (!places.Any())
    {
        var details = new List<string>();
        var selectedHotels = new List<Hotel>();
        decimal totalCost = 0;
        decimal budgetPerNight = hotelBudget / nights;

        // Ch·ªçn t·ªëi ƒëa 1-2 kh√°ch s·∫°n ph√π h·ª£p gi√° ƒë·ªÉ minh h·ªça (∆∞u ti√™n g·∫ßn ng√¢n s√°ch/ƒë√™m)
        var candidates = _context.Hotels
            .OrderBy(h => Math.Abs(h.PricePerNight - budgetPerNight))
            .ThenBy(h => h.PricePerNight)
            .Take(2)
            .ToList();

        if (!candidates.Any())
            return (0, "Kh√¥ng t√¨m th·∫•y kh√°ch s·∫°n ph√π h·ª£p", new List<Hotel>());

        foreach (var hotel in candidates)
        {
            int nightsForHotel = Math.Max(1, nights / candidates.Count);
            decimal clusterCost = hotel.PricePerNight * nightsForHotel;
            if (totalCost + clusterCost > hotelBudget)
            {
                // ƒëi·ªÅu ch·ªânh ƒë·ªÉ kh√¥ng v∆∞·ª£t ng√¢n s√°ch
                nightsForHotel = (int)Math.Floor((hotelBudget - totalCost) / Math.Max(1, hotel.PricePerNight));
                if (nightsForHotel <= 0) break;
                clusterCost = hotel.PricePerNight * nightsForHotel;
            }

            selectedHotels.Add(hotel);
            totalCost += clusterCost;
            details.Add($"‚Ä¢ {hotel.Name}: {nightsForHotel} ƒë√™m √ó {FormatCurrency(hotel.PricePerNight)}");

            if (totalCost >= hotelBudget) break;
        }

        return (totalCost, string.Join("<br/>", details), selectedHotels);
    }

    var clusters = ClusterPlacesByDistance(places, days);
    
    if (!clusters.Any())
        return (0, "Kh√¥ng th·ªÉ t·∫°o c·ª•m ƒë·ªãa ƒëi·ªÉm", new List<Hotel>());

    var selectedHotels2 = new List<Hotel>();
    var details2 = new List<string>();
    decimal totalCost2 = 0;
    decimal budgetPerNight2 = hotelBudget / nights;

    foreach (var cluster in clusters)
    {
        int nightsForCluster = cluster.RecommendedNights;
        
        if (nightsForCluster <= 0)
            continue;

        decimal budgetForCluster = budgetPerNight2 * nightsForCluster;
        decimal maxPricePerNight = budgetForCluster / nightsForCluster;

        var hotel = FindBestHotelForCluster(cluster.Places, maxPricePerNight);
        
        if (hotel != null)
        {
            selectedHotels2.Add(hotel);
            decimal clusterCost = hotel.PricePerNight * nightsForCluster;
            totalCost2 += clusterCost;

            // S·ª¨A: HI·ªÇN TH·ªä ƒê·∫¶Y ƒê·ª¶ T√äN C√ÅC ƒê·ªäA ƒêI·ªÇM
            string locationNames;
            if (cluster.Places.Count <= 3)
            {
                // Hi·ªÉn th·ªã t·∫•t c·∫£ n·∫øu <= 3 ƒë·ªãa ƒëi·ªÉm
                locationNames = string.Join(", ", cluster.Places.Select(p => p.Name));
            }
            else
            {
                // Hi·ªÉn th·ªã 3 ƒë·ªãa ƒëi·ªÉm ƒë·∫ßu + s·ªë c√≤n l·∫°i
                var firstThree = string.Join(", ", cluster.Places.Take(3).Select(p => p.Name));
                locationNames = $"{firstThree} v√† {cluster.Places.Count - 3} ƒë·ªãa ƒëi·ªÉm kh√°c";
            }

            details2.Add($"‚Ä¢ {hotel.Name} (Khu v·ª±c: {locationNames}): " +
                       $"{nightsForCluster} ƒë√™m √ó {FormatCurrency(hotel.PricePerNight)}");
        }
    }

    if (!selectedHotels2.Any())
    {
        var defaultHotel = _context.Hotels.OrderBy(h => h.PricePerNight).FirstOrDefault();
        if (defaultHotel != null)
        {
            selectedHotels2.Add(defaultHotel);
            decimal defaultCost = Math.Min(defaultHotel.PricePerNight * nights, hotelBudget);
            totalCost2 = defaultCost;
            details2.Add($"‚Ä¢ {defaultHotel.Name} (M·∫∑c ƒë·ªãnh): {nights} ƒë√™m √ó {FormatCurrency(defaultCost / nights)}");
        }
    }

    return (totalCost2, string.Join("<br/>", details2), selectedHotels2);
}



        // CH∆ØA S·ª¨ D·ª§NG DO HOTEL S·ª¨ D·ª§NG C·ª§M T·ªåA ƒê·ªò
        /*private Hotel FindBestHotelForCluster(List<TouristPlace> cluster, decimal budgetPerDay)
        {
            if (cluster == null || !cluster.Any())
                return null;

            // 1. T√≠nh trung t√¢m c·ª•m ƒëi·ªÉm ƒë·∫øn
            double centerLat = cluster.Average(p => p.Latitude);
            double centerLng = cluster.Average(p => p.Longitude);

            // 2. L·∫•y t·∫•t c·∫£ kh√°ch s·∫°n (ho·∫∑c l·ªçc s∆° b·ªô theo ph√¢n kh√∫c)
            var hotels = GetHotelsByBudgetSegment(
                cluster.Select(p => p.Id).ToList(),
                budgetPerDay
            );

            if (!hotels.Any())
                return null;

            // 3. T√¨m kh√°ch s·∫°n g·∫ßn trung t√¢m nh·∫•t
            var bestHotel = hotels
                .OrderBy(h => GetDistance(h.Latitude, h.Longitude, centerLat, centerLng))
                .FirstOrDefault();

            return bestHotel;
        }*/



        // H√†m t√≠nh kho·∫£ng c√°ch (Haversine)
        private double GetDistance(double lat1, double lon1, double lat2, double lon2)
        {
            const double R = 6371; // b√°n k√≠nh Tr√°i ƒê·∫•t (km)
            double dLat = ToRadians(lat2 - lat1);
            double dLon = ToRadians(lon2 - lon1);
            double a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +
                       Math.Cos(ToRadians(lat1)) * Math.Cos(ToRadians(lat2)) *
                       Math.Sin(dLon / 2) * Math.Sin(dLon / 2);
            double c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));
            return R * c;
        }

        private double ToRadians(double angle) => angle * Math.PI / 180;
        // Updated FormatSuggestion to include local transport
        private string FormatSuggestion(TransportOption transport, decimal transportCost,
            string hotelDetails, decimal hotelCost, string foodDetails, decimal foodCost,
            decimal ticketCost, decimal localTransportCost, decimal miscCost, decimal totalCost,
            decimal remaining, int days, List<string> ticketDetails, List<string> localTransportDetails,
            List<string> warnings)
        {
            var sb = new StringBuilder();
            sb.Append($"üöó <strong>{transport.Name}</strong> ({transport.Type}): {FormatCurrency(transportCost)}<br/>");
            sb.Append($"üè® {hotelDetails}<br/>");
            sb.Append($"üçΩÔ∏è {foodDetails}<br/>");
            sb.Append($"üé´ V√© tham quan: {FormatCurrency(ticketCost)}<br/>");

            // NEW: Add local transport details
            if (localTransportCost > 0)
            {
                sb.Append($"üöå Di chuy·ªÉn n·ªôi th√†nh: {FormatCurrency(localTransportCost)}<br/>");
                if (localTransportDetails.Any())
                {
                    foreach (var detail in localTransportDetails)
                    {
                        sb.Append($"  {detail}<br/>");
                    }
                }
            }

            sb.Append($"üí° Chi ph√≠ ph√°t sinh (10%): {FormatCurrency(miscCost)}<br/>");
            sb.Append($"üí∞ <strong>T·ªïng chi ph√≠: {FormatCurrency(totalCost)} | C√≤n l·∫°i: {FormatCurrency(remaining)}</strong><br/>");

            if (ticketDetails.Any())
            {
                sb.Append($"üìç <strong>Chi ti·∫øt {days} ng√†y:</strong><br/>");
                foreach (var d in ticketDetails) sb.Append($"{d}<br/>");
            }

            if (warnings.Any())
            {
                sb.Append($"‚ö†Ô∏è <strong>L∆∞u √Ω:</strong><br/>");
                foreach (var w in warnings) sb.Append($"{w}<br/>");
            }

            var content = sb.ToString();
            return $"<div class='suggestion' data-transport='{transportCost}' data-hotel='{hotelCost}' data-food='{foodCost}' data-ticket='{ticketCost}' data-local='{localTransportCost}' data-misc='{miscCost}' data-total='{totalCost}'>{content}</div>";
        }

        // Rest of the existing methods remain the same...
        private List<string> RemoveDuplicateSuggestions(List<string> suggestions)
        {
            var uniqueSuggestions = new List<string>();
            var seenTransports = new HashSet<string>();

            foreach (var suggestion in suggestions)
            {
                var match = Regex.Match(suggestion, @"üöó <strong>([^<]+)</strong>");
                if (match.Success)
                {
                    string transportName = match.Groups[1].Value;
                    if (!seenTransports.Contains(transportName))
                    {
                        seenTransports.Add(transportName);
                        uniqueSuggestions.Add(suggestion);
                    }
                }
            }

            return uniqueSuggestions;
        }

        private int CalculateRecommendedDays(int numberOfPlaces) =>
            numberOfPlaces switch
            {
                <= 0 => 1,
                <= 2 => 1,
                <= 4 => 2,
                <= 6 => 3,
                <= 8 => 4,
                _ => 5
            };

        private decimal ExtractTotalCost(string suggestion)
        {
            var match = Regex.Match(suggestion, @"T·ªïng chi ph√≠:\s([\d,.]+)ƒë");
            if (match.Success)
            {
                var value = match.Groups[1].Value.Replace(".", "").Replace(",", "");
                return decimal.TryParse(value, out var cost) ? cost : decimal.MaxValue;
            }
            return decimal.MaxValue;
        }

        private (decimal TotalCost, string Details) CalculateOptimizedFoodCosts(
     List<string> selectedPlaceIds,
     decimal foodBudget,
     int days)
        {
            if (days <= 0 || foodBudget <= 0)
                return (0, "Kh√¥ng c√≥ ng√¢n s√°ch ƒÉn u·ªëng");

            var places = _context.TouristPlaces
                .Where(p => selectedPlaceIds.Contains(p.Id))
                .ToList();

            if (!places.Any())
                return (foodBudget, $"ƒÇn u·ªëng t·ªïng qu√°t: {days} ng√†y √ó {FormatCurrency(foodBudget / days)}/ng√†y");

            // T√≠nh s·ªë ng√†y th·ª±c t·∫ø t·∫°i m·ªói khu v·ª±c
            var clusters = ClusterPlacesByDistance(places, days);
            var details = new List<string>();
            decimal totalCost = 0;
            decimal dailyBudget = foodBudget / days;

            foreach (var cluster in clusters)
            {
                int daysInCluster = cluster.RecommendedNights + 1; // +1 v√¨ ng√†y cu·ªëi kh√¥ng ng·ªß l·∫°i

                if (daysInCluster <= 0)
                    continue;

                decimal budgetForCluster = dailyBudget * daysInCluster;
                decimal dailyBudgetInCluster = budgetForCluster / daysInCluster;

                // Ph√¢n lo·∫°i theo m·ª©c gi√°
                string segment = dailyBudgetInCluster > 400000 ? "cao c·∫•p"
                                : (dailyBudgetInCluster > 200000 ? "t·∫ßm trung" : "ti·∫øt ki·ªám");

                // Ch·ªçn nh√† h√†ng ph√π h·ª£p v·ªõi khu v·ª±c v√† ng√¢n s√°ch
                var restaurants = GetRestaurantsByLocation(cluster.Places.Select(p => p.Id).ToList(), dailyBudgetInCluster);

                if (restaurants.Any())
                {
                    var selectedRestaurant = restaurants.First();
                    decimal avgMealPrice = Math.Min(selectedRestaurant.AveragePricePerPerson * 2.5m, dailyBudgetInCluster);
                    decimal clusterFoodCost = avgMealPrice * daysInCluster;
                    totalCost += clusterFoodCost;

                    string locationNames = string.Join(", ", cluster.Places.Take(2).Select(p => p.Name));
                    if (cluster.Places.Count > 2)
                        locationNames += "...";

                    details.Add($"‚Ä¢ Khu v·ª±c {locationNames}: {daysInCluster} ng√†y √ó {FormatCurrency(avgMealPrice)}/ng√†y " +
                               $"t·∫°i {selectedRestaurant.Name} ({segment})");
                }
                else
                {
                    decimal clusterFoodCost = dailyBudgetInCluster * daysInCluster;
                    totalCost += clusterFoodCost;

                    string locationNames = string.Join(", ", cluster.Places.Take(2).Select(p => p.Name));
                    details.Add($"‚Ä¢ Khu v·ª±c {locationNames}: {daysInCluster} ng√†y √ó {FormatCurrency(dailyBudgetInCluster)}/ng√†y ({segment})");
                }
            }

            // ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° ng√¢n s√°ch
            if (totalCost > foodBudget)
            {
                totalCost = foodBudget;
                details.Clear();
                details.Add($"ƒÇn u·ªëng t·ªïng qu√°t: {days} ng√†y √ó {FormatCurrency(foodBudget / days)}/ng√†y (ƒë√£ ƒëi·ªÅu ch·ªânh)");
            }

            return (totalCost, string.Join("<br/>", details));
        }



        private (decimal TotalCost, List<string> TicketDetails, List<string> Warnings) CalculateTicketCosts(
    List<string> selectedPlaceIds,
    TripPlannerViewModel model)
        {
            var details = new List<string>();
            var warnings = new List<string>();
            decimal cost = 0;

            foreach (var placeId in selectedPlaceIds)
            {
                var place = _context.TouristPlaces.FirstOrDefault(p => p.Id == placeId);
                if (place == null) continue;

                var attractions = _context.Attractions
                    .Where(a => a.TouristPlaceId == placeId)
                    .ToList();

                if (!attractions.Any())
                {
                    warnings.Add($"Kh√¥ng c√≥ th√¥ng tin v√© cho ƒë·ªãa ƒëi·ªÉm {place.Name}");
                    continue;
                }

                decimal sum = attractions.Sum(a => a.TicketPrice);
                cost += sum;
                details.Add($"‚Ä¢ {place.Name}: V√© tham quan {FormatCurrency(sum)}");
            }

            if (cost == 0)
            {
                warnings.Add("Kh√¥ng t√¨m th·∫•y th√¥ng tin v√© tham quan cho c√°c ƒë·ªãa ƒëi·ªÉm ƒë√£ ch·ªçn.");
            }

            return (cost, details, warnings);
        }

        private List<string> GenerateBudgetWarning(decimal budget, int days, int placeCount)
        {
            return new List<string> {
                $"‚ö†Ô∏è <strong>Ng√¢n s√°ch kh√¥ng ƒë·ªß</strong><br/>" +
                $"Ng√¢n s√°ch hi·ªán t·∫°i: {FormatCurrency(budget)} cho {days} ng√†y v√† {placeCount} ƒë·ªãa ƒëi·ªÉm.<br/>" +
                $"üí° <strong>G·ª£i √Ω:</strong><br/>‚Ä¢ Gi·∫£m s·ªë ng√†y<br/>‚Ä¢ Ho·∫∑c tƒÉng ng√¢n s√°ch<br/>‚Ä¢ Ho·∫∑c gi·∫£m ƒë·ªãa ƒëi·ªÉm"
            };
        }

        private bool ValidateSelectedPlaces(List<string> places) => places != null && places.Any();

        private decimal CalculateTransportCost(TransportOption transport, LegacyLocation legacy, double km, List<string> placeIds, int days, bool isOtherCity)
        {
            if (legacy != null)
            {
                var priceHistory = _context.TransportPriceHistories.FirstOrDefault(p => p.LegacyLocationId == legacy.Id && p.TransportOptionId == transport.Id);
                if (priceHistory != null) return priceHistory.Price;
            }

            if (transport.IsSelfDrive)
            {
                double actualDistance = km > 100 ? km : 300;
                if (isOtherCity) actualDistance *= 2;

                decimal fuelCost = (decimal)actualDistance * (transport.FuelConsumption / 100) * transport.FuelPrice;
                decimal maintenanceCost = fuelCost * 0.2m;

                return fuelCost + maintenanceCost;
            }
            else
            {
                return transport.FixedPrice > 0 ? transport.FixedPrice : transport.Price;
            }
        }

        private string FormatCurrency(decimal value) => $"{value:N0}ƒë";

        private List<Hotel> GetHotelsByBudgetSegment(List<string> placeIds, decimal budgetPerDay)
        {
            // Gi·ªõi h·∫°n gi√° kh√°ch s·∫°n: 40% ng√¢n s√°ch/ng√†y
            decimal maxPricePerNight = budgetPerDay * 0.4m;

            var hotels = (placeIds != null && placeIds.Any())
                ? _context.Hotels.Where(h => placeIds.Contains(h.TouristPlaceId)).ToList()
                : _context.Hotels.ToList();

            // ∆Øu ti√™n kh√°ch s·∫°n trong gi·ªõi h·∫°n
            var inBudget = hotels.Where(h => h.PricePerNight <= maxPricePerNight).ToList();

            if (inBudget.Any())
            {
                // ∆Øu ti√™n kh√°ch s·∫°n g·∫ßn m·ª©c 40% nh·∫•t (ƒë·∫πp + h·ª£p l√Ω)
                return inBudget.OrderBy(h => Math.Abs(h.PricePerNight - maxPricePerNight)).ToList();
            }
            else
            {
                // Kh√¥ng c√≥ kh√°ch s·∫°n trong gi·ªõi h·∫°n ‚Üí l·∫•y kh√°ch s·∫°n r·∫ª nh·∫•t
                return hotels.OrderBy(h => h.PricePerNight).ToList();
            }
        }

        private List<TouristPlace> OptimizeRoute(double startLat, double startLng, List<TouristPlace> places)
        {
            var route = new List<TouristPlace>();
            var remaining = new List<TouristPlace>(places);

            double currentLat = startLat;
            double currentLng = startLng;

            while (remaining.Any())
            {
                var next = remaining
                    .OrderBy(p => GetDistance(currentLat, currentLng, p.Latitude, p.Longitude))
                    .First();

                route.Add(next);
                remaining.Remove(next);

                currentLat = next.Latitude;
                currentLng = next.Longitude;
            }

            return route;
        }

        private List<Restaurant> GetRestaurantsByBudgetSegment(List<string> placeIds, decimal budgetPerDay)
        {
            // 50% ng√¢n s√°ch ƒÉn u·ªëng d√†nh cho m·ªói b·ªØa
            decimal targetMealPrice = (budgetPerDay * 0.5m) / 2.5m; // 2.5 b·ªØa/ng√†y

            var restaurants = (placeIds != null && placeIds.Any())
                ? _context.Restaurants.Where(r => placeIds.Contains(r.TouristPlaceId)).ToList()
                : _context.Restaurants.ToList();

            if (!restaurants.Any())
                return new List<Restaurant>();

            // S·∫Øp x·∫øp theo ƒë·ªô g·∫ßn v·ªõi targetMealPrice (c√†ng g·∫ßn c√†ng ∆∞u ti√™n)
            return restaurants
                .OrderBy(r => Math.Abs(r.AveragePricePerPerson - targetMealPrice))
                .ToList();
        }

        // Chia ƒë·ªãa ƒëi·ªÉm theo s·ªë ng√†y & t√≠nh qu√£ng ƒë∆∞·ªùng t·ª´ng ng√†y (c√≥ kh·ª© h·ªìi)
        private double CalculateTotalDistancePerDay(List<TouristPlace> route, double hotelLat, double hotelLng, int days)
        {
            int placesPerDay = (int)Math.Ceiling((double)route.Count / days);
            double totalDistance = 0;

            for (int day = 0; day < days; day++)
            {
                var dayPlaces = route.Skip(day * placesPerDay).Take(placesPerDay).ToList();
                if (!dayPlaces.Any()) continue;

                double dLat = hotelLat;
                double dLng = hotelLng;

                // ƒêi t·ª´ng ƒëi·ªÉm trong ng√†y
                foreach (var place in dayPlaces)
                {
                    totalDistance += GetDistance(dLat, dLng, place.Latitude, place.Longitude);
                    dLat = place.Latitude;
                    dLng = place.Longitude;
                }

                // Kh·ª© h·ªìi v·ªÅ kh√°ch s·∫°n
                totalDistance += GetDistance(dLat, dLng, hotelLat, hotelLng);
            }

            return totalDistance;
        }


        // ============= LOGIC ƒê√É S·ª¨A C√ÅC L·ªñI =============

        // 1. S·ª¨A H√ÄM CLUSTERING - PH√ÇN C·ª§M TH√îNG MINH H∆†N
        // 1. S·ª¨A H√ÄM CLUSTERING - LOGIC PH√ÇN B·ªî NG√ÄY TH√îNG MINH H∆†N
        private List<PlaceCluster> ClusterPlacesByDistance(List<TouristPlace> places, int totalDays)
        {
            if (!places.Any()) return new List<PlaceCluster>();

            var clusters = new List<PlaceCluster>();
            var remaining = new List<TouristPlace>(places);

            // T√≠nh s·ªë cluster t·ªëi ∆∞u
            int maxClusters = Math.Min(totalDays, places.Count);
            int recommendedClusters;

            // S·ª¨A: LOGIC CH·ªåN S·ªê CLUSTER TH√îNG MINH H∆†N
            if (totalDays <= 2)
                recommendedClusters = 1;
            else if (totalDays <= 4)
                recommendedClusters = Math.Min(2, maxClusters);
            else if (totalDays <= 6)
                recommendedClusters = Math.Min(3, maxClusters);
            else
                recommendedClusters = Math.Min((totalDays + 2) / 3, maxClusters);

            // ƒê·∫£m b·∫£o √≠t nh·∫•t 1 cluster
            recommendedClusters = Math.Max(1, recommendedClusters);

            int placesPerCluster = (int)Math.Ceiling((double)places.Count / recommendedClusters);

            // T·∫°o clusters d·ª±a tr√™n kho·∫£ng c√°ch
            for (int c = 0; c < recommendedClusters && remaining.Any(); c++)
            {
                var cluster = new PlaceCluster { Places = new List<TouristPlace>() };

                var centerPlace = remaining.First();
                cluster.Places.Add(centerPlace);
                remaining.Remove(centerPlace);

                var nearbyPlaces = remaining
                    .Where(p => GetDistance(centerPlace.Latitude, centerPlace.Longitude, p.Latitude, p.Longitude) <= 15)
                    .OrderBy(p => GetDistance(centerPlace.Latitude, centerPlace.Longitude, p.Latitude, p.Longitude))
                    .Take(placesPerCluster - 1)
                    .ToList();

                cluster.Places.AddRange(nearbyPlaces);
                remaining.RemoveAll(p => nearbyPlaces.Contains(p));
                clusters.Add(cluster);
            }

            // Ph√¢n ph·ªëi ƒë·ªãa ƒëi·ªÉm c√≤n l·∫°i
            while (remaining.Any())
            {
                var place = remaining.First();
                var nearestCluster = clusters
                    .OrderBy(c => c.Places.Min(p => GetDistance(p.Latitude, p.Longitude, place.Latitude, place.Longitude)))
                    .First();

                nearestCluster.Places.Add(place);
                remaining.Remove(place);
            }

            // S·ª¨A: PH√ÇN B·ªî NG√ÄY ƒê·ªÄU H∆†N
            if (clusters.Count == 1)
            {
                clusters[0].RecommendedNights = Math.Max(0, totalDays - 1);
            }
            else
            {
                // Ph√¢n b·ªï ng√†y ƒë·ªÅu cho c√°c clusters
                int baseDaysPerCluster = totalDays / clusters.Count;
                int extraDays = totalDays % clusters.Count;

                for (int i = 0; i < clusters.Count; i++)
                {
                    int daysForCluster = baseDaysPerCluster + (i < extraDays ? 1 : 0);
                    clusters[i].RecommendedNights = Math.Max(0, daysForCluster - 1);
                }
            }

            return clusters;
        }


        private Hotel FindBestHotelForCluster(List<TouristPlace> clusterPlaces, decimal budgetPerNight)
        {
            if (!clusterPlaces.Any()) return null;

            // T√≠nh trung t√¢m c·ª•m
            double centerLat = clusterPlaces.Average(p => p.Latitude);
            double centerLng = clusterPlaces.Average(p => p.Longitude);

            // L·∫•y kh√°ch s·∫°n trong khu v·ª±c v√† ph√π h·ª£p ng√¢n s√°ch
            var placeIds = clusterPlaces.Select(p => p.Id).ToList();
            var candidateHotels = GetHotelsByBudgetSegment(placeIds, budgetPerNight * 2.5m); // TƒÉng gi·ªõi h·∫°n

            if (!candidateHotels.Any())
            {
                // Fallback: L·∫•y t·∫•t c·∫£ kh√°ch s·∫°n g·∫ßn trung t√¢m
                candidateHotels = _context.Hotels.ToList();
            }

            // Ch·ªçn kh√°ch s·∫°n g·∫ßn trung t√¢m c·ª•m nh·∫•t trong ng√¢n s√°ch
            return candidateHotels
                .Where(h => h.PricePerNight <= budgetPerNight * 1.2m) // Cho ph√©p v∆∞·ª£t 20%
                .OrderBy(h => GetDistance(h.Latitude, h.Longitude, centerLat, centerLng))
                .FirstOrDefault()
                ?? candidateHotels.OrderBy(h => h.PricePerNight).First(); // Fallback: r·∫ª nh·∫•t
        }

        private List<Restaurant> GetRestaurantsByLocation(List<string> placeIds, decimal dailyBudget)
        {
            decimal targetMealPrice = (dailyBudget * 0.6m) / 2.5m; // 60% ng√¢n s√°ch cho ƒÉn u·ªëng

            var restaurants = _context.Restaurants
                .Where(r => placeIds.Contains(r.TouristPlaceId))
                .OrderBy(r => Math.Abs(r.AveragePricePerPerson - targetMealPrice))
                .ToList();

            // N·∫øu kh√¥ng c√≥ nh√† h√†ng trong khu v·ª±c, l·∫•y t·∫•t c·∫£
            if (!restaurants.Any())
            {
                restaurants = _context.Restaurants
                    .OrderBy(r => Math.Abs(r.AveragePricePerPerson - targetMealPrice))
                    .ToList();
            }

            return restaurants;
        }
        private string FormatOptimizedSuggestion(TransportOption transport, decimal transportCost,
     string hotelDetails, decimal hotelCost, string foodDetails, decimal foodCost,
     decimal ticketCost, decimal localTransportCost, decimal miscCost, decimal totalCost,
     decimal remaining, int days, List<string> ticketDetails, List<string> localTransportDetails,
     List<string> warnings, string routeDetails, string clusterDetails, bool basicOnly)
        {
            var sb = new StringBuilder();
            sb.Append($"üöó <strong>{transport.Name}</strong> ({transport.Type}): {FormatCurrency(transportCost)}<br/>");
            if (!basicOnly)
            {
                sb.Append($"üè® {hotelDetails}<br/>");
                sb.Append($"üçΩÔ∏è {foodDetails}<br/>");
                sb.Append($"üé´ V√© tham quan: {FormatCurrency(ticketCost)}<br/>");
            }

            if (!basicOnly && localTransportCost > 0)
            {
                sb.Append($"üöå Di chuy·ªÉn n·ªôi th√†nh: {FormatCurrency(localTransportCost)}<br/>");
                if (localTransportDetails.Any())
                {
                    var fullDetails = ExpandLocalTransportDetails(localTransportDetails, days);
                    foreach (var detail in fullDetails)
                    {
                        sb.Append($"  {detail}<br/>");
                    }
                }
            }

            if (!basicOnly)
            {
                sb.Append($"üí° Chi ph√≠ ph√°t sinh (10%): {FormatCurrency(miscCost)}<br/>");
                sb.Append($"üí∞ <strong>T·ªïng chi ph√≠: {FormatCurrency(totalCost)} | C√≤n l·∫°i: {FormatCurrency(remaining)}</strong><br/>");
            }

            // Always show the destination and suggestions block if available
            if (!string.IsNullOrEmpty(clusterDetails))
            {
                sb.Append(clusterDetails);
            }

            if (!basicOnly && !string.IsNullOrEmpty(routeDetails))
            {
                sb.Append($"<br/><b>üìÖ L·ªãch tr√¨nh t·ªëi ∆∞u:</b><br/>{routeDetails}");
            }

            if (!basicOnly && ticketDetails.Any())
            {
                sb.Append($"<br/><b>üé´ Chi ti·∫øt v√© tham quan:</b><br/>");
                foreach (var detail in ticketDetails)
                {
                    sb.Append($"{detail}<br/>");
                }
            }

            if (!basicOnly && warnings.Any())
            {
                sb.Append($"<br/><b>‚ö†Ô∏è L∆∞u √Ω:</b><br/>");
                foreach (var w in warnings) sb.Append($"{w}<br/>");
            }

            var content = sb.ToString();
            return $"<div class='suggestion' data-transport='{transportCost}' data-hotel='{hotelCost}' data-food='{foodCost}' data-ticket='{ticketCost}' data-local='{localTransportCost}' data-misc='{miscCost}' data-total='{totalCost}'>{content}</div>";
        }
        private List<TouristPlace> SuggestDefaultPlaces(int count = 6)
        {
            return _context.TouristPlaces
                .OrderByDescending(p => p.Rating)
                .ThenBy(p => p.Name)
                .Take(count)
                .ToList();
        }
        private List<List<TouristPlace>> DistributePlacesAcrossDays(List<TouristPlace> places, int days)
        {
            var result = new List<List<TouristPlace>>();

            // S·ª¨A: Kh·ªüi t·∫°o ch√≠nh x√°c s·ªë ng√†y
            for (int i = 0; i < days; i++)
            {
                result.Add(new List<TouristPlace>());
            }

            if (!places.Any())
            {
                return result; // Tr·∫£ v·ªÅ danh s√°ch r·ªóng cho t·∫•t c·∫£ c√°c ng√†y
            }

            // S·ª¨A: Logic ph√¢n b·ªï t·ªët h∆°n
            if (places.Count <= days)
            {
                // √çt ƒë·ªãa ƒëi·ªÉm h∆°n s·ªë ng√†y: m·ªói ƒë·ªãa ƒëi·ªÉm 1 ng√†y, ng√†y c√≤n l·∫°i ngh·ªâ
                for (int i = 0; i < places.Count; i++)
                {
                    result[i].Add(places[i]);
                }
                // C√°c ng√†y c√≤n l·∫°i t·ª± ƒë·ªông l√† r·ªóng (ngh·ªâ ng∆°i)
            }
            else
            {
                // Nhi·ªÅu ƒë·ªãa ƒëi·ªÉm h∆°n s·ªë ng√†y: ph√¢n b·ªï ƒë·ªÅu
                int placesPerDay = (int)Math.Ceiling((double)places.Count / days);

                for (int i = 0; i < places.Count; i++)
                {
                    int dayIndex = i / placesPerDay;
                    if (dayIndex >= days) dayIndex = days - 1; // ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° s·ªë ng√†y
                    result[dayIndex].Add(places[i]);
                }
            }

            return result;
        }

        // S·ª¨A H√ÄM CalculatePersonalVehicleTransportWithFullSchedule
        private (decimal TotalCost, List<string> Details) CalculatePersonalVehicleTransportWithFullSchedule(
            List<TouristPlace> places,
            int days,
            double startLat,
            double startLng,
            TransportOption transport,
            List<string> details)
        {
            decimal totalCost = 0;
            double totalDistance = 0;
            var allDayRoutes = new List<string>();

            // Ph√¢n b·ªï ƒë·ªãa ƒëi·ªÉm theo ng√†y
            var dailyPlaces = DistributePlacesAcrossDays(places, days);

            // S·ª¨A: HI·ªÇN TH·ªä CH√çNH X√ÅC T·∫§T C·∫¢ C√ÅC NG√ÄY (t·ª´ 1 ƒë·∫øn days)
            for (int day = 0; day < days; day++) // S·ª¨A: d√πng index 0-based
            {
                var dayPlaces = dailyPlaces[day]; // L·∫•y danh s√°ch ƒë·ªãa ƒëi·ªÉm cho ng√†y n√†y
                int displayDay = day + 1; // Hi·ªÉn th·ªã l√† ng√†y 1, 2, 3...

                if (!dayPlaces.Any())
                {
                    allDayRoutes.Add($"Ng√†y {displayDay}: Ngh·ªâ ng∆°i/t·ª± do kh√°m ph√° (~5 km)");
                    totalDistance += 5; // Chi ph√≠ di chuy·ªÉn nh·ªè cho ng√†y ngh·ªâ
                }
                else
                {
                    var (dayDistance, routeDescription) = CalculateDayRoute(dayPlaces, startLat, startLng, displayDay);
                    totalDistance += dayDistance;
                    allDayRoutes.Add(routeDescription);
                }
            }

            // T√≠nh chi ph√≠ nhi√™n li·ªáu
            if (transport.FuelConsumption > 0 && transport.FuelPrice > 0)
            {
                decimal fuelUsed = ((decimal)totalDistance * transport.FuelConsumption) / 100m;
                totalCost = fuelUsed * transport.FuelPrice;

                details.Add($"‚Ä¢ {transport.Name} (ph∆∞∆°ng ti·ªán c√° nh√¢n)");
                details.AddRange(allDayRoutes); // HI·ªÇN TH·ªä T·∫§T C·∫¢ NG√ÄY
                details.Add($"‚Ü≥ T·ªïng qu√£ng ƒë∆∞·ªùng: ~{totalDistance:F1} km");
                details.Add($"‚Ü≥ Nhi√™n li·ªáu: {fuelUsed:F2} l√≠t √ó {transport.FuelPrice:N0}ƒë = {FormatCurrency(totalCost)}");
            }
            else
            {
                totalCost = (decimal)totalDistance * 3000; // 3,000ƒë/km ∆∞·ªõc t√≠nh
                details.Add($"‚Ä¢ {transport.Name} (∆∞·ªõc t√≠nh)");
                details.AddRange(allDayRoutes);
                details.Add($"‚Ü≥ Chi ph√≠ ∆∞·ªõc t√≠nh: {FormatCurrency(totalCost)} (~{totalDistance:F1} km)");
            }

            return (totalCost, details);
        }

        // S·ª¨A H√ÄM CalculateTaxiTransportWithFullSchedule  
        private (decimal TotalCost, List<string> Details) CalculateTaxiTransportWithFullSchedule(
            List<TouristPlace> places,
            int days,
            double startLat,
            double startLng,
            List<string> details)
        {
            decimal totalCost = 0;
            double totalDistance = 0;
            var allDayRoutes = new List<string>();
            decimal taxiRatePerKm = 15000; // 15,000ƒë/km

            // Ph√¢n b·ªï ƒë·ªãa ƒëi·ªÉm theo ng√†y
            var dailyPlaces = DistributePlacesAcrossDays(places, days);

            // S·ª¨A: HI·ªÇN TH·ªä CH√çNH X√ÅC T·∫§T C·∫¢ C√ÅC NG√ÄY
            for (int day = 0; day < days; day++) // S·ª¨A: d√πng index 0-based
            {
                var dayPlaces = dailyPlaces[day]; // L·∫•y danh s√°ch ƒë·ªãa ƒëi·ªÉm cho ng√†y n√†y
                int displayDay = day + 1; // Hi·ªÉn th·ªã l√† ng√†y 1, 2, 3...

                if (!dayPlaces.Any())
                {
                    allDayRoutes.Add($"Ng√†y {displayDay}: Ngh·ªâ ng∆°i/t·ª± do kh√°m ph√° (~0 km taxi)");
                    // Kh√¥ng t√≠nh chi ph√≠ taxi cho ng√†y ngh·ªâ
                }
                else
                {
                    var (dayDistance, routeDescription) = CalculateDayRoute(dayPlaces, startLat, startLng, displayDay);
                    totalDistance += dayDistance;
                    allDayRoutes.Add(routeDescription);
                }
            }

            // T√≠nh t·ªïng chi ph√≠ taxi
            totalCost = (decimal)totalDistance * taxiRatePerKm;

            details.Add("‚Ä¢ Taxi n·ªôi th√†nh");
            details.AddRange(allDayRoutes); // HI·ªÇN TH·ªä T·∫§T C·∫¢ NG√ÄY
            details.Add($"‚Ü≥ T·ªïng qu√£ng ƒë∆∞·ªùng: {totalDistance:F1} km √ó {taxiRatePerKm:N0}ƒë/km = {FormatCurrency(totalCost)}");

            if (totalDistance > 50)
            {
                details.Add($"‚Ü≥ L∆∞u √Ω: Qu√£ng ƒë∆∞·ªùng d√†i, c√≥ th·ªÉ th∆∞∆°ng l∆∞·ª£ng gi√° theo ng√†y");
            }

            return (totalCost, details);
        }

        private List<string> ExpandLocalTransportDetails(List<string> details, int days)
        {
            var result = new List<string>(details ?? new List<string>());
            var existingDays = new HashSet<int>();
            var regex = new Regex("^Ng√†y\\s+(\\d+)");

            foreach (var line in result)
            {
                var match = regex.Match(line);
                if (match.Success && int.TryParse(match.Groups[1].Value, out var n))
                {
                    existingDays.Add(n);
                }
            }

            for (int d = 1; d <= days; d++)
            {
                if (!existingDays.Contains(d))
                {
                    result.Add($"Ng√†y {d}: Ngh·ªâ ng∆°i/t·ª± do kh√°m ph√° (~0 km taxi)");
                }
            }

            // S·∫Øp x·∫øp l·∫°i c√°c d√≤ng Ng√†y X theo th·ª© t·ª± tƒÉng d·∫ßn, gi·ªØ nguy√™n c√°c d√≤ng kh√¥ng ph·∫£i 'Ng√†y'
            var headerLines = result.Where(l => !regex.IsMatch(l)).ToList();
            var dayLines = result.Where(l => regex.IsMatch(l))
                                 .OrderBy(l => int.Parse(regex.Match(l).Groups[1].Value))
                                 .ToList();

            var merged = new List<string>();
            merged.AddRange(headerLines);
            merged.AddRange(dayLines);
            return merged;
        }

    }

}